#--- JPF project properties file for project jpf-android
jpf-android = ${config_path}

#--- other JPF projects we depend on
@using jpf-core


#--- project specific host VM classpath (used by Java to load classes)
# NOTE: you have to replace the wildcard jar specs with explicit jar pathnames
# if this property file is used from within a build.xml or NetBeans project.xml,
# since both do not support wildcard patterns in classpath specs
jpf-android.native_classpath =\
   ${jpf-android}/build/jpf-android.jar;\
   ${jpf-android}/lib/android/;\
   ${jpf-android}/lib/*.jar

#--- project specific JPF classpath (used by JPF to load system-under-test classes)
jpf-android.classpath =\
   ${jpf-android}/build/jpf-android-classes.jar;\
   ${jpf-android}/build/examples;\
    ${jpf-android}/lib/android/
   
  #--- where are the classes for the JPF regression tests (used by host VM and JPF)
jpf-android.test_classpath =\
   ${jpf-android}/build/jpf-android-classes.jar;\
   ${jpf-android}/lib/android;\
   ${jpf-android}/build/tests

#--- project specific JPF sourcepath (used by JPF to locate sources for system-under-test classes)
jpf-android.sourcepath =\
   ${jpf-android}/src/examples;\
   ${jpf-android}/lib/android

#--- other project specific options go here (e.g. 'vm.insn_factory.class' or 'peer_packages')

# we have our own peer package
jpf-android.peer_packages=gov.nasa.jpf.android

jpf.print_exception_stack = true


log.handler.class=gov.nasa.jpf.util.LogHandler
log.fine=gov.nasa.jpf.jvm.ClassInfo


# Windows seem to have a different default
log.level=fine