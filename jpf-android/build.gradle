apply plugin: 'java'
apply plugin: 'eclipse'

// ----------------------------------------------------------------------------
//    Property management
// ----------------------------------------------------------------------------

// local props have to come first, because Ant properties are immutable 
// NOTE: this file is local - it is never in the repository! -->

// Create a ZIP file tree using path
FileTree zip = zipTree('lib/jpf.zip')


loadProperties 'build.properties'


def loadProperties(String sourceFileName) {
    def config = new Properties()
    def propFile = new File(sourceFileName)
    if (propFile.canRead()) {
        config.load(new FileInputStream(propFile))
        for (Map.Entry property in config) {
            ext[property.key] = property.value;
        }
    }
}

// ----------------------------------------------------------------------------
//    Dependency management
// ----------------------------------------------------------------------------

/**
 * Define the site where we can grab SOOT. Unfortunately SOOT is not
 * available in any centralized Maven or Ivy repository, so we have to download
 * it by hand.
 */
def depSite = 'https://bitbucket.org/heila/jpf-android/downloads/'

/**
 * Define the list artifacts we want to download to run jpf-android
 */
def jpaDeps = [
  'android.jar',
  'jpf.jar',
]
/**
 * Define the directory where we are going to store downloaded libraries.
 */
def libDir = 'lib/'

/**
 * This task gets all the artifacts specified in sootDeps from `site`
 * `sootSite`
 */
task getDeps << {
  new File(libDir).mkdir()
  jpaDeps.each { dep ->
    def l = new File(libDir + dep)
    if(!l.exists()) {
      println 'Getting ' + dep
      ant.get(verbose: true, src: sootSite+dep, dest: l.canonicalPath)
    }
  }
}

/**
 * This is the standard configuration of external repositories of Gradle.
 */
repositories {
  mavenCentral()

  // for pegdown doclet
  maven {
    url 'https://oss.sonatype.org/content/repositories/snapshots/'
  }
}

/**
 * Here we specify the dependencies of the project for the various phases, like
 * compilation and runtime.
 */
dependencies {
  compile fileTree(dir: libDir, includes: ['jpf.jar'])
  compile fileTree(dir: libDir, includes: ['android.jar'])

  compile group: 'com.github.jsqlparser', name: 'jsqlparser', version: '0.9'

  testCompile group: 'junit', name: 'junit', version: '4.+'
  
}

/**
 * Finally we say to Gradle that the compilation task for Java files depends
 * on the `getSoot` task.
 */
//importBuild.dependsOn('getDeps')


